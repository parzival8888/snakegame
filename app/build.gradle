/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'application'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1' // Used to create a fat JAR with all dependencies
}

repositories {
    mavenCentral()
}

dependencies {
    // SQLite JDBC driver to work with SQLite databases
    implementation 'org.xerial:sqlite-jdbc:3.45.3.0'
    // JSON library for parsing and creating JSON objects
    implementation 'org.json:json:20240303'

    // JUnit 5 for unit tests (Jupiter API and Engine for testing)
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    // Mockito dependency
    testImplementation 'org.mockito:mockito-core:5.5.0'
    // For using Mockito with JUnit 5 (Optional)
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
}

test {
    useJUnitPlatform()
	testLogging {
		events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT"
        exceptionFormat "full"
	}
}

tasks.withType(org.gradle.api.tasks.testing.Test).each { test ->
    test.systemProperty('net.bytebuddy.disable_agent', 'true')
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}

application {
    // Define the main class for the application
    mainClass = 'org.snake.App'
}

jar {
    manifest {
        attributes 'Main-Class': 'org.snake.App'  
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Copy the JRE's bin, lib and conf directory to the build distribution folder
task copyJreBin(type: Copy) {
    from '/Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home/bin/'
    into "$buildDir/distributions/app/jre/bin/"
}

task copyJreLib(type: Copy) {
    from '/Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home/lib/'
    into "$buildDir/distributions/app/jre/lib/"
}

task copyJreConf(type: Copy) {
    from '/Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home/conf/'
    into "$buildDir/distributions/app/jre/conf/"
}

// Bundle the application with the JRE and other resources into a zip file
task bundleApp(type: Zip) {
    dependsOn shadowJar
    dependsOn copyJreBin
    dependsOn copyJreLib
    dependsOn copyJreConf
    from('build/libs') {
        include 'app-all.jar'
        into 'lib'
    }

    from("$buildDir/distributions/app/jre") {
        into 'jre'
    }

    from('src/main/resources/scripts') {
        into '.'
    }

    destinationDirectory = file("$buildDir/distributions")
    archiveFileName = 'snakeapp.zip'
}

task copyZip(type: Copy) {
    from "$buildDir/distributions/snakeapp.zip"
    into "deploy/"
}

// Ensure the copy task runs after myTask
bundleApp.finalizedBy(copyZip)
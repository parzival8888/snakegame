/*
 *  Contains tasks to do the following:
 *
 *      - Perform unit testing of the application using JUnit
 *      - Create a deployment file for Windows and Mac to deploy the game on other devices
 *
 *  To run the unit tests use either:
 *
 *      - verification->test
 *      - build (this will build first, then execute the unit tests)
 *
 *  To package the application for deployment on other devices, use either:
 *
 *      - bundleAppMac (for Mac)
 *      - bundleAppWin (for Windows)
 *
 *  All the standard Gradle tasks exist, such as build, clean, run, javadoc, etc.
 *
 */

plugins {
    id 'application'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1' // Used to create a fat JAR with all dependencies
    id 'de.undercouch.download' version '5.4.0' // Used to download a JRE to package the app to run on other devices
}

repositories {
    mavenCentral()
}

dependencies {
    // SQLite JDBC driver to work with SQLite databases
    implementation 'org.xerial:sqlite-jdbc:3.45.3.0'
    // JSON library for parsing and creating JSON objects
    implementation 'org.json:json:20240303'

    // JUnit 5 for unit tests (Jupiter API and Engine for testing)
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    // Mockito dependency
    testImplementation 'org.mockito:mockito-core:5.5.0'
    // For using Mockito with JUnit 5 (Optional)
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
}

test {
    useJUnitPlatform()
	testLogging {
		events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT"
        exceptionFormat "full"
	}
}

tasks.withType(org.gradle.api.tasks.testing.Test).each { test ->
    test.systemProperty('net.bytebuddy.disable_agent', 'true')
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}

application {
    // Define the main class for the application
    mainClass = 'org.snake.App'
}

jar {
    manifest {
        attributes 'Main-Class': 'org.snake.App'  
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// URL to download the JRE
ext.jreDownloadUrlMac = 'https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.4%2B7/OpenJDK21U-jre_aarch64_mac_hotspot_21.0.4_7.tar.gz'
ext.jreDownloadUrlWin = 'https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.4%2B7/OpenJDK21U-jre_x64_windows_hotspot_21.0.4_7.zip'

// Download JRE to directory
ext.jreDownloadDir = "$buildDir/jre"
// Directory to extract the JRE into after download
ext.jreExtractDir = "$buildDir/jre-extracted"

// Task to download the JRE for Mac
task downloadJreMac(type: Download) {
    src jreDownloadUrlMac // The URL from where to download the JRE
    dest file("$jreDownloadDir/jre.tar.gz") // Destination of the downloaded file
    onlyIfNewer true // Only download if the file is newer
}

// Task to extract the downloaded JRE 
task extractJreMac(type: Copy) {
    dependsOn downloadJreMac // Ensure the JRE is downloaded before extraction
    from tarTree(resources.gzip(file("$jreDownloadDir/jre.tar.gz"))) // Extract the tar.gz
    into jreExtractDir // Destination directory for the extracted JRE
}

// Task to download the JRE for Mac
task downloadJreWin(type: Download) {
    src jreDownloadUrlWin // The URL from where to download the JRE
    dest file("$jreDownloadDir/jre.zip") // Destination of the downloaded file
    onlyIfNewer true // Only download if the file is newer
}

// Task to extract the downloaded JRE 
task extractJreWin(type: Copy) {
    dependsOn downloadJreWin // Ensure the JRE is downloaded before extraction
    from zipTree("$jreDownloadDir/jre.zip") // Extract the zip
    into jreExtractDir // Destination directory for the extracted JRE
}

// Task to clean up the downloaded JRE and extracted files
task cleanJre(type: Delete) {
    delete jreDownloadDir
    delete jreExtractDir
}

// Copy the JRE's bin, lib and conf directory to the build distribution folder - for Mac
task copyJreBinMac(type: Copy) {
    dependsOn extractJreMac
    from "$buildDir/jre-extracted/jdk-21.0.4+7-jre/Contents/Home/bin/"
    into "$buildDir/distributions/app/jre/bin/"
}

task copyJreLibMac(type: Copy) {
    dependsOn extractJreMac
    from "$buildDir/jre-extracted/jdk-21.0.4+7-jre/Contents/Home/lib/"
    into "$buildDir/distributions/app/jre/lib/"
}

task copyJreConfMac(type: Copy) {
    dependsOn extractJreMac
    from "$buildDir/jre-extracted/jdk-21.0.4+7-jre/Contents/Home/conf/"
    into "$buildDir/distributions/app/jre/conf/"
}

// Copy the JRE's bin, lib and conf directory to the build distribution folder - for Windows
task copyJreBinWin(type: Copy) {
    dependsOn extractJreWin
    from "$buildDir/jre-extracted/jdk-21.0.4+7-jre/Contents/Home/bin/"
    into "$buildDir/distributions/app/jre/bin/"
}

task copyJreLibWin(type: Copy) {
    dependsOn extractJreWin
    from "$buildDir/jre-extracted/jdk-21.0.4+7-jre/Contents/Home/lib/"
    into "$buildDir/distributions/app/jre/lib/"
}

task copyJreConfWin(type: Copy) {
    dependsOn extractJreWin
    from "$buildDir/jre-extracted/jdk-21.0.4+7-jre/Contents/Home/conf/"
    into "$buildDir/distributions/app/jre/conf/"
}

// Bundle the application with the JRE and other resources into a zip file - for Mac
task bundleAppMac(type: Zip) {
    dependsOn shadowJar
    dependsOn downloadJreMac
    dependsOn extractJreMac
    dependsOn copyJreBinMac
    dependsOn copyJreLibMac
    dependsOn copyJreConfMac
    from('build/libs') {
        include 'app-all.jar'
        into 'lib'
    }

    from("$buildDir/distributions/app/jre") {
        into 'jre'
    }

    from('src/main/resources/scripts') {
        into '.'
    }

    destinationDirectory = file("$buildDir/distributions")
    archiveFileName = 'snakeapp.zip'
}

// Bundle the application with the JRE and other resources into a zip file - for Windows
task bundleAppWin(type: Zip) {
    dependsOn shadowJar
    dependsOn downloadJreWin
    dependsOn extractJreWin
    dependsOn copyJreBinWin
    dependsOn copyJreLibWin
    dependsOn copyJreConfWin
    from('build/libs') {
        include 'app-all.jar'
        into 'lib'
    }

    from("$buildDir/distributions/app/jre") {
        into 'jre'
    }

    from('src/main/resources/scripts') {
        into '.'
    }

    destinationDirectory = file("$buildDir/distributions")
    archiveFileName = 'snakeapp.zip'
}